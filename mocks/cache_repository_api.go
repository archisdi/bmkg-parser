// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	models "bmkg/models"

	mock "github.com/stretchr/testify/mock"
)

// CacheRepositoryApi is an autogenerated mock type for the CacheRepositoryApi type
type CacheRepositoryApi struct {
	mock.Mock
}

// GetLastEarthquakeCache provides a mock function with given fields:
func (_m *CacheRepositoryApi) GetLastEarthquakeCache() (models.Earthquake, bool, error) {
	ret := _m.Called()

	var r0 models.Earthquake
	if rf, ok := ret.Get(0).(func() models.Earthquake); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Earthquake)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetLatestEarthquakeCache provides a mock function with given fields:
func (_m *CacheRepositoryApi) GetLatestEarthquakeCache() ([]models.Earthquake, bool, error) {
	ret := _m.Called()

	var r0 []models.Earthquake
	if rf, ok := ret.Get(0).(func() []models.Earthquake); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Earthquake)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetLastEarthquakeCache provides a mock function with given fields: earthquake
func (_m *CacheRepositoryApi) SetLastEarthquakeCache(earthquake models.Earthquake) error {
	ret := _m.Called(earthquake)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Earthquake) error); ok {
		r0 = rf(earthquake)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLatestEarthquakeCache provides a mock function with given fields: earthquakes
func (_m *CacheRepositoryApi) SetLatestEarthquakeCache(earthquakes []models.Earthquake) error {
	ret := _m.Called(earthquakes)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Earthquake) error); ok {
		r0 = rf(earthquakes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
